// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model EventPlayer {
  id          String    @id @default(cuid())
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
  player      User      @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId    String
  team        EventTeam @relation(fields: [teamId], references: [id])
  teamId      String

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Event {
  id          String    @id @default(cuid())
  title       String
  location    String?
  startTime   DateTime
  price       Float
  privacy     PrivacyEvent @default(public)
  numberOfPlayers Int

  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String

  teams       EventTeam[]

  players     EventPlayer[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum PrivacyEvent {
  public
  private
}

model EventTeam {
  id          String    @id @default(cuid())
  name        String
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
  players     EventPlayer[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Friendship {
  id          String            @id @default(cuid())
  status      FriendshipStatus  @default(pending) // PENDING, ACCEPTED, REJECTED
  friend      User              @relation("friend", fields: [friendId], references: [id], onDelete: Cascade)
  friendId    String
  friendOf    User              @relation("friendOf", fields: [friendOfId], references: [id], onDelete: Cascade)
  friendOfId  String

  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([friendId, friendOfId])
}

enum FriendshipStatus {
  pending
  accepted
  rejected
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  username      String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  // Friendship relations
  friends       Friendship[]          @relation("friend")
  friendOf      Friendship[]          @relation("friendOf")

  // Event relations
  events        Event[]

  // EventPlayer relations
  eventPlayers  EventPlayer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
